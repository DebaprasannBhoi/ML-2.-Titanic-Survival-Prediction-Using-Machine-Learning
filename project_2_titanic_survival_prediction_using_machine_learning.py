# -*- coding: utf-8 -*-
"""Project 2 : Titanic Survival Prediction Using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MIIOgz6YMKDZ-wvE9TlYDLE_6pRaY-uA

# Importing the Dependancies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# Data Colection & Processing"""

# Load the data from csv file to Pandas Dataframe
titanic_data = pd.read_csv('/content/Titanic dataset.csv')

# printing the first five row of the datafame
titanic_data.head()

#counting total number of rows and columns
titanic_data.shape

# Getting some information about the data
titanic_data.info()

# checking the number of missing values in each column
titanic_data.isnull().sum()

"""# Handeling the Missing values"""

#drop the Cabin column from the Data set
titanic_data = titanic_data.drop (columns='Cabin', axis=1)

# replacing the missing values in "Age" column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace = True)

# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

#check the number of missing values in each column
titanic_data.isnull().sum()

"""# Statistical Data Analysis"""

# Getting some statistical measure ofthe data
titanic_data.describe()

# finding the number of people survived or not survived
titanic_data['Survived'].value_counts()

"""# Data Visualization"""

sns.set()

# making a count plot for "Survived" column
sns.countplot(x='Survived',data = titanic_data)

titanic_data['Sex'].value_counts()

# making a countplot for 'Sex' column
sns.countplot(x='Sex',data=titanic_data)

# number of survivors Gender Wise
sns.countplot(x='Sex', hue='Survived',data= titanic_data)

# Making a countplot for 'Pclass' column
sns.countplot(x='Pclass', data= titanic_data)

"""# Encoding the categorical Column"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""# Separating Features & Target"""

X= titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'], axis=1)
Y= titanic_data['Survived']

print(X)

print(Y)

"""# Spliting the data into training and testing"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# Model Training
LogisticRegression
"""

model=LogisticRegression()

# training the Logistic Regression model with training data
model.fit(X_train, Y_train)

"""# Model Evaluation
# Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data : ', test_data_accuracy)